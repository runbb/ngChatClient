"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_socket_io_1 = require("nativescript-socket.io");
var page_1 = require("ui/page");
var _ = require("underscore");
var Message = (function () {
    function Message(avatar, power, from, message, background, color, messageColor) {
        this.avatar = avatar;
        this.power = power;
        this.from = from;
        this.message = message;
        this.background = background;
        this.color = color;
        this.messageColor = messageColor;
    }
    return Message;
}());
var Notification = (function () {
    function Notification(image, message) {
        this.image = image;
        this.message = message;
    }
    return Notification;
}());
function _unescape(code) {
    return _.unescape(code).replace(/&#x3C;/, '<');
}
var AppComponent = (function () {
    function AppComponent(page) {
        this.page = page;
        this.server = "http://khaleejchat.com/";
        this.connection_name = "Android Application";
        this.messages = [];
        this.notifications = [];
        this.users = [];
        this.powers = [];
        this.broadcasts = [];
    }
    AppComponent.prototype.connection = function () {
        var _this = this;
        var server = this.page.getViewById("serverip");
        var username = this.page.getViewById("username");
        var password = this.page.getViewById("password");
        this.server = server.text;
        this.socket = nativescript_socket_io_1.connect(this.server, { transports: ['polling', 'websocket'] });
        this.socket.on('connect', function () {
            var listview = _this.page.getViewById("listNotifications");
            _this.notifications.unshift(new Notification('', 'تم الاتصال بنجاح'));
            listview.refresh();
            _this.socket.emit('msg', { cmd: "login", data: {
                    username: username.text,
                    password: password.text,
                    stealth: true,
                    fp: _this.connection_name,
                    refr: _this.connection_name,
                    r: _this.connection_name
                } });
        });
        this.socket.on('msg', function (data) {
            if (typeof data.data === "string" && data.cmd != 'u-') {
                data.data = JSON.parse(unescape(data.data));
            }
            if (data.cmd == "msg") {
                var listview = _this.page.getViewById("listMessages");
                var user = _this.users.filter(function (value) { return value.id == data.data.uid; })[0];
                var power = _this.powers.filter(function (value) {
                    if (user) {
                        return value.name == user.power;
                    }
                    else {
                        return false;
                    }
                })[0];
                data.data.bg = data.data.bg || '#FFFFFF';
                data.data.ucol = data.data.ucol || '#000000';
                data.data.mcol = data.data.mcol || '#000000';
                _this.messages.push(new Message(_this.server + data.data.pic, (power ? _this.server + "sico/" + power.ico : ''), _unescape(data.data.topic), _unescape(data.data.msg.replace(/<\/?[^>]+(>|$)/g, "")), data.data.bg, data.data.ucol, data.data.mcol));
                listview.refresh();
                if (listview.ios) {
                    listview.ios.scrollToRowAtIndexPathAtScrollPositionAnimated(NSIndexPath.indexPathForItemInSection(_this.messages.length - 1, 0), UITableViewScrollPosition.UITableViewScrollPositionTop, true);
                }
                else {
                    listview.scrollToIndex(_this.messages.length - 1);
                }
            }
            if (data.cmd == "not") {
                var listview = _this.page.getViewById("listNotifications");
                var user = _this.users.filter(function (value) { return value.id == data.data.user; })[0] || { pic: "" };
                _this.notifications.unshift(new Notification(_this.server + user.pic, _unescape(data.data.msg.replace(/<\/?[^>]+(>|$)/g, ""))));
                listview.refresh();
            }
            if (data.cmd == "ulist") {
                var listview = _this.page.getViewById("listonline");
                _this.users = data.data;
                listview.refresh();
            }
            if (data.cmd == "powers") {
                _this.powers = data.data;
                for (var i = 0; i < _this.powers.length; i++) {
                    var pname = _this.powers[i].name;
                    if (pname == '') {
                        pname = '_';
                    }
                    _this.powers[pname] = _this.powers[i];
                }
            }
            if (data.cmd == 'bc') {
                var listview = _this.page.getViewById("listBroadcast");
                var user = _this.users.filter(function (value) { return value.id == data.data.uid; })[0];
                var power = _this.powers.filter(function (value) {
                    if (user) {
                        return value.name == user.power;
                    }
                    else {
                        return false;
                    }
                })[0];
                data.data.bg = data.data.bg || '#FFFFFF';
                data.data.ucol = data.data.ucol || '#000000';
                data.data.mcol = data.data.mcol || '#000000';
                _this.broadcasts.unshift(new Message(_this.server + data.data.pic, (power ? _this.server + "sico/" + power.ico : ''), _unescape(data.data.topic), _unescape(data.data.msg.replace(/<\/?[^>]+(>|$)/g, "")), data.data.bg, data.data.ucol, data.data.mcol));
                listview.refresh();
                if (listview.ios) {
                    listview.ios.scrollToRowAtIndexPathAtScrollPositionAnimated(NSIndexPath.indexPathForItemInSection(0, 0), UITableViewScrollPosition.UITableViewScrollPositionTop, true);
                }
                else {
                    listview.scrollToIndex(0);
                }
            }
        });
        this.socket.on('disconnect', function (data) {
            var listview = _this.page.getViewById("listNotifications");
            _this.notifications.unshift(new Notification('', 'اوه لا !! انقطع الاتصال'));
            listview.refresh();
        });
        this.socket.on('connect_error', function (data) {
            var listview = _this.page.getViewById("listNotifications");
            _this.notifications.unshift(new Notification('', 'اوه لا !! خطأ في الاتصال'));
            listview.refresh();
        });
        this.socket.on('connect_timeout', function (data) {
            var listview = _this.page.getViewById("listNotifications");
            _this.notifications.unshift(new Notification('', 'اوه لا !! لا يمكنني الاتصال بالخادم'));
            listview.refresh();
        });
        this.socket.on('reconnect_attempt', function (data) {
            var listview = _this.page.getViewById("listNotifications");
            _this.notifications.unshift(new Notification('', 'انا اقوم باعادة الاتصال بالخادم الان'));
            listview.refresh();
        });
        this.socket.on('error', function (data) {
            var listview = _this.page.getViewById("listNotifications");
            _this.notifications.unshift(new Notification('', 'اوه لا !! حدث خطأ ما'));
            listview.refresh();
        });
    };
    AppComponent.prototype.onItemTap = function (evt) {
    };
    AppComponent.prototype.sendMessage = function () {
        var textfield = this.page.getViewById("messageinput");
        if (textfield.text.trim() == "")
            return;
        this.socket.emit("msg", { cmd: "msg", data: { msg: textfield.text } });
        textfield.text = "";
    };
    AppComponent.prototype.sendBroadcast = function () {
        var textfield = this.page.getViewById("broadcastinput");
        if (textfield.text.trim() == "")
            return;
        this.socket.emit("msg", { cmd: "bc", data: { msg: textfield.text, link: null } });
        textfield.text = "";
    };
    return AppComponent;
}());
AppComponent = __decorate([
    core_1.Component({
        selector: "my-app",
        templateUrl: 'app.component.html'
    }),
    __metadata("design:paramtypes", [page_1.Page])
], AppComponent);
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,